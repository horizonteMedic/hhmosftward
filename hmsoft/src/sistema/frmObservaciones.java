/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistema;

import Caja.AddCargos;
import static Caja.AddCargos.registrar;
import Caja.RegistrarCliente;
import Clases.clsConnection;
import Clases.clsFunciones;
import java.awt.KeyEventPostProcessor;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hugo
 */
public class frmObservaciones extends javax.swing.JDialog {

    public static FichaMedica ficha;
    public static FichaAgroindustriales ficha1;
    public static Anexo_02 ficha2;
    clsFunciones oFunc = new clsFunciones();
    clsConnection oConn = new clsConnection();
    DefaultTableModel obsv;

    /**
     * Creates new form frmObservaciones
     */
    public frmObservaciones(FichaMedica parent, boolean modal) {
        //super(parent, modal);
        frmObservaciones.ficha = parent;
        this.setModal(modal);
        initComponents();
        setLocationRelativeTo(this);
        KeyboardFocusManager kb = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        kb.addKeyEventPostProcessor(new KeyEventPostProcessor() {
            @Override
            public boolean postProcessKeyEvent(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE && this != null) {
                    dispose();
                    return false;
                }
                return true;
            }
        });
        cargarObsv();
    }
    public frmObservaciones(FichaAgroindustriales parent, boolean modal) {
        //super(parent, modal);
        frmObservaciones.ficha1 = parent;
        this.setModal(modal);
        initComponents();
        setLocationRelativeTo(this);
        KeyboardFocusManager kb = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        kb.addKeyEventPostProcessor(new KeyEventPostProcessor() {
            @Override
            public boolean postProcessKeyEvent(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE && this != null) {
                    dispose();
                    return false;
                }
                return true;
            }
        });
        cargarObsv();
    }
    public frmObservaciones(Anexo_02 parent, boolean modal) {
        //super(parent, modal);
        frmObservaciones.ficha2 = parent;
        this.setModal(modal);
        initComponents();
        setLocationRelativeTo(this);
        KeyboardFocusManager kb = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        kb.addKeyEventPostProcessor(new KeyEventPostProcessor() {
            @Override
            public boolean postProcessKeyEvent(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE && this != null) {
                    dispose();
                    return false;
                }
                return true;
            }
        });
        cargarObsv();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbObservaciones = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtObservaciones = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tbObservaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "cod", "Observaciones"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbObservaciones.getTableHeader().setReorderingAllowed(false);
        tbObservaciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbObservacionesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbObservaciones);

        jLabel1.setText("Obsv :");

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtObservaciones)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAgregar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtObservaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnAgregar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbObservacionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbObservacionesMouseClicked
        if (evt.getClickCount() == 1) {

//            Integer cod  = Integer.valueOf( tbClientes.getValueAt(tbClientes.getSelectedRow(),0).toString());
//            verifica(String.valueOf(cod));
            // registrar.txtCargo(txtAddCargos.getText());
            ficha.txtObsv(tbObservaciones.getValueAt(tbObservaciones.getSelectedRow(), 1).toString());

        }else if(evt.getClickCount()==2){
                        ficha1.txtObsv1(tbObservaciones.getValueAt(tbObservaciones.getSelectedRow(), 1).toString());

        }else if(evt.getClickCount()==3){
            ficha2.txtObsv2(tbObservaciones.getValueAt(tbObservaciones.getSelectedRow(), 1).toString());
        }
        
    }//GEN-LAST:event_tbObservacionesMouseClicked

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        if (!txtObservaciones.getText().isEmpty()) {
            AgregarObserv();
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmObservaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmObservaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmObservaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmObservaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frmObservaciones dialog = new frmObservaciones(ficha, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbObservaciones;
    private javax.swing.JTextField txtObservaciones;
    // End of variables declaration//GEN-END:variables
    private void cargarObsv() {
        String[] titulos = {"Cod ", "Observación"};
        String[] registros = new String[2];
        obsv = new DefaultTableModel(null, titulos) {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
        tabla();
        String sql = "select * from t_observaciones order by observacion asc ";
        if (oConn.FnBoolQueryExecute(sql)) {
            try {
                while (oConn.setResult.next()) {
                    registros[0] = oConn.setResult.getString("id");
                    registros[1] = oConn.setResult.getString("observacion");
                    obsv.addRow(registros);

                }
            } catch (SQLException ex) {
                Logger.getLogger(frmObservaciones.class.getName()).log(Level.SEVERE, null, ex);
            }
            tbObservaciones.setModel(obsv);
        }
    }

    void tabla() {
        tbObservaciones.setFont(new java.awt.Font("Tahoma", 0, 11));
        tbObservaciones.setModel(obsv);
        tbObservaciones.getColumnModel().getColumn(0).setPreferredWidth(5);
        tbObservaciones.getColumnModel().getColumn(1).setPreferredWidth(350);

        tbObservaciones.getTableHeader().setReorderingAllowed(false);

    }

    public void AgregarObserv() {
        String SqlStmt;
        SqlStmt = "INSERT INTO t_observaciones (observacion) values ('" + txtObservaciones.getText() + "')";

        int seleccion = JOptionPane.showOptionDialog(
                this, // Componente padre
                "¿Desea guardar la siguiente observación?", //Mensaje
                "Seleccione una opción", // Título
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Si", "No"},
                "Si");
        if (seleccion != -1) {
            if ((seleccion + 1) == 1) {

                if (oConn.FnBoolQueryExecuteUpdate(SqlStmt)) {
                    try {
                        if (oConn.setResult.next()) {
                            oFunc.SubSistemaMensajeInformacion("Se ha registrado la Entrada con Éxito");
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(frmObservaciones.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                //registrar.CargarProfesionOcupacion();
//      ficha.txtObsv(txtAddCargos.getText());
//      txtAddCargos.setText(null);
                cargarObsv();
            } else {
                // nada
            }
        }

    }
}
